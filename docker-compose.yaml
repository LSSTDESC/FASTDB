# This is a docker compose environment to bring up a dev/test fastdb
# environment.
#
# To use it, you need to make sure to build it for the architecture of
# your system.  If you're on an x86_64 system, it should work as is.  If
# you're on an ARM system, then you need to do something different.
#
# In general, to build the images, run
#
#   ARCH=<architecture> docker compose build
#
# where <architecture> is one of "x86_64" or "aarch64".  (In the case of
# x86_64, you can optionally omit the intial ARCH=...)

services:
  kafka-zookeeper:
    image: ${DOCKER_ARCHIVE:-registry.nersc.gov/m1727/raknop}/fastdb-kafka-test-${ARCH:-x86_64}:${DOCKER_VERSION:-latest}
    build:
      context: ./docker/kafka
    healthcheck:
      test: netcat -w 1 localhost 2181 || exit 1
      interval: 5s
      timeout: 10s
      retries: 10
    entrypoint: [ "bin/zookeeper-server-start.sh", "config/zookeeper.properties" ]

  kafka-server:
    depends_on:
       kafka-zookeeper:
         condition: service_healthy
    image: ${DOCKER_ARCHIVE:-registry.nersc.gov/m1727/raknop}/fastdb-kafka-test-${ARCH:-x86_64}:${DOCKER_VERSION:-latest}
    build:
      context: ./docker/kafka
    healthcheck:
      test: netcat -w 1 localhost 9092 || exit 1
      interval: 5s
      timeout: 10s
      retries: 10
    entrypoint: [ "bin/kafka-server-start.sh", "config/server.properties" ]

  postgres:
    image: ${DOCKER_ARCHIVE:-registry.nersc.gov/m1727/raknop}/fastdb-postgres-${ARCH:-x86_64}:${DOCKER_VERSION:-latest}
    build:
      context: ./docker/postgres
      target: postgres
    volumes:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
      - type: bind
        source: tests/secrets
        target: /secrets
        read_only: true
    healthcheck:
      test: netcat -w 1 localhost 5432 || exit 1
      interval: 5s
      timeout: 10s
      retries: 10

  mongodb:
    image: ${DOCKER_ARCHIVE:-registry.nersc.gov/m1727/raknop}/fastdb-mongodb-${ARCH:-x86_64}:${DOCKER_VERSION:-latest}
    build:
      context: ./docker/mongodb
    environment:
      - MONGODB_HOST=mongodb
      - MONGODB_DBNAME=brokeralert
      - MONGODB_COLLECTION=alerts
      - MONGODB_ADMIN_USER=admin
      - MONGODB_ADMIN_PASSWD=fragile
      - MONGODB_ALERT_READER_USER=alertreader
      - MONGODB_ALERT_READER_PASSWD=reader
      - MONGODB_ALERT_WRITER_USER=alertwriter
      - MONGODB_ALERT_WRITER_PASSWD=writer
    volumes:
      - type: volume
        source: mongodb_data
        target: /data/db
    healthcheck:
      test: test `mongosh mongodb://$$MONGODB_ADMIN_USER:$$MONGODB_ADMIN_PASSWD@localhost/admin --eval "use admin" --eval "db.system.users.find({user:'$$MONGODB_ADMIN_USER'}).count()"` -eq 1 || exit 1
      interval: 5s
      timeout: 10s
      retries: 10

  createdb:
    depends_on:
      postgres:
        condition: service_healthy
    image: ${DOCKER_ARCHIVE:-registry.nersc.gov/m1727/raknop}/fastdb-shell-${ARCH:-x86_64}:${DOCKER_VERSION:-latest}
    build:
      context: ./docker/webserver
      target: shell
    user: ${USERID:-0}:${GROUPID:-0}
    volumes:
      - type: bind
        source: .
        target: /code
    working_dir: /code/db
    entrypoint: [ "python", "apply_migrations.py" ]

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "${MAILHOG_PORT:-8025}:8025"

  queryrunner:
    depends_on:
      createdb:
        condition: service_completed_successfully
    image: ${DOCKER_ARCHIVE:-registry.nersc.gov/m1727/raknop}/fastdb-query-runner-${ARCH:-x86_64}:${DOCKER_VERSION:-latest}
    build:
      context: ./docker/query_runner
      target: queryrunner
    user: ${USERID:-0}:${GROUPID:-0}
    volumes:
      - type: bind
        source: tests/secrets
        target: /secrets
        read_only: true
      - type: bind
        source: install
        target: /fastdb
      - type: volume
        source: query_results
        target: /query_results
    post_start:
      - command: /bin/bash -c "chown -R ${USERID:-0}:${GROUPID:-0} /query_results"
        privileged: true
        user: root

  webap:
    depends_on:
      mongodb:
        condition: service_healthy
      createdb:
        condition: service_completed_successfully
      mailhog:
        condition: service_started
      queryrunner:
        condition: service_started
    image: ${DOCKER_ARCHIVE:-registry.nersc.gov/m1727/raknop}/fastdb-webap-${ARCH:-x86_64}:${DOCKER_VERSION:-latest}
    build:
      context: ./docker/webserver
      target: webserver
    environment:
      - MONGODB_HOST=mongodb
      - MONGODB_DBNAME=brokeralert
      - MONGODB_COLLECTION=alerts
      - MONGODB_ADMIN_USER=admin
      - MONGODB_ADMIN_PASSWD=fragile
      - MONGODB_ALERT_READER_USER=alertreader
      - MONGODB_ALERT_READER_PASSWD=reader
      - MONGODB_ALERT_WRITER_USER=alertwriter
      - MONGODB_ALERT_WRITER_PASSWD=writer
    user: ${USERID:-0}:${GROUPID:-0}
    ports:
      - "${WEBPORT:-8080}:8080"
    volumes:
      - type: bind
        source: tests/secrets
        target: /secrets
        read_only: true
      - type: bind
        source: .
        target: /code
      - type: bind
        source: install
        target: /fastdb
      - type: volume
        source: sessions
        target: /sessions
      - type: volume
        source: query_results
        target: /query_results
      - type: volume
        source: logs
        target: /logs
    post_start:
      - command: /bin/bash -c "
                   chown -R ${USERID:-0}:${GROUPID:-0} /sessions
                   && chown -R ${USERID:-0}:${GROUPID:-0} /query_results
                   && chown -R ${USERID:-0}:${GROUPID:-0} /logs
                   "
        privileged: true
        user: root

  shell:
    depends_on:
      kafka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      createdb:
        condition: service_completed_successfully
    image: ${DOCKER_ARCHIVE:-registry.nersc.gov/m1727/raknop}/fastdb-shell-${ARCH:-x86_64}:${DOCKER_VERSION:-latest}
    build:
      context: ./docker/webserver
      target: shell
    environment:
      - MONGODB_HOST=mongodb
      - MONGODB_DBNAME=brokeralert
      - MONGODB_COLLECTION=alerts
      - MONGODB_ADMIN_USER=admin
      - MONGODB_ADMIN_PASSWD=fragile
      - MONGODB_ALERT_READER_USER=alertreader
      - MONGODB_ALERT_READER_PASSWD=reader
      - MONGODB_ALERT_WRITER_USER=alertwriter
      - MONGODB_ALERT_WRITER_PASSWD=writer
    user: ${USERID:-0}:${GROUPID:-0}
    volumes:
      - type: bind
        source: tests/secrets
        target: /secrets
        read_only: true
      - type: bind
        source: .
        target: /code
      - type: bind
        source: install
        target: /fastdb
      - type: volume
        source: sessions
        target: /sessions
      - type: volume
        source: query_results
        target: /query_results
      - type: volume
        source: logs
        target: /logs
    post_start:
      - command: /bin/bash -c "
                   chown -R ${USERID:-0}:${GROUPID:-0} /sessions
                   && chown -R ${USERID:-0}:${GROUPID:-0} /query_results
                   && chown -R ${USERID:-0}:${GROUPID:-0} /logs
                   "
        privileged: true
        user: root
    working_dir: /code

  shell-nocreatedb:
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    image: ${DOCKER_ARCHIVE:-registry.nersc.gov/m1727/raknop}/fastdb-shell-${ARCH:-x86_64}:${DOCKER_VERSION:-latest}
    build:
      context: ./docker/webserver
      target: shell
    environment:
      - MONGODB_HOST=mongodb
      - MONGODB_DBNAME=brokeralert
      - MONGODB_COLLECTION=alerts
      - MONGODB_ADMIN_USER=admin
      - MONGODB_ADMIN_PASSWD=fragile
      - MONGODB_ALERT_READER_USER=alertreader
      - MONGODB_ALERT_READER_PASSWD=reader
      - MONGODB_ALERT_WRITER_USER=alertwriter
      - MONGODB_ALERT_WRITER_PASSWD=writer
    user: ${USERID:-0}:${GROUPID:-0}
    volumes:
      - type: bind
        source: tests/secrets
        target: /secrets
        read_only: true
      - type: bind
        source: .
        target: /code
      - type: bind
        source: install
        target: /fastdb
      - type: volume
        source: sessions
        target: /sessions
      - type: volume
        source: query_results
        target: /query_results
      - type: volume
        source: logs
        target: /logs
    post_start:
      - command: /bin/bash -c "
                   chown -R ${USERID:-0}:${GROUPID:-0} /sessions
                   && chown -R ${USERID:-0}:${GROUPID:-0} /query_results
                   && chown -R ${USERID:-0}:${GROUPID:-0} /logs
                   "
        privileged: true
        user: root
    working_dir: /code

volumes:
  postgres_data:
  mongodb_data:
  query_results:
  sessions:
  logs:
